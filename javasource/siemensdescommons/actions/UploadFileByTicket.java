// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package siemensdescommons.actions;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.siemens.plm.sdk.dss.DssClientFactory;
import com.siemens.plm.sdk.dss.DssConfiguration;
import com.siemens.plm.sdk.dss.IDssClient;
import com.siemens.plm.sdk.dss.model.UploadFileByTicketRequest;
import com.siemens.plm.sdk.dss.model.UploadFileInput;
import com.siemens.plm.webapp.strategies.IConfigStrategy;
import siemenssamauthssomodule.actions.custom.MendixStartupConfig;
import siemenssamauthssomodule.proxies.SessionData;
import siemenssamauthssomodule.proxies.microflows.Microflows;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class UploadFileByTicket extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __file;
	private siemensdescommons.proxies.Attachment file;
	private java.lang.String contentType;
	private java.lang.String accessKeyId;
	private java.lang.String secretAccessKey;
	private java.lang.String dssEndpoint;

	public UploadFileByTicket(IContext context, IMendixObject file, java.lang.String contentType, java.lang.String accessKeyId, java.lang.String secretAccessKey, java.lang.String dssEndpoint)
	{
		super(context);
		this.__file = file;
		this.contentType = contentType;
		this.accessKeyId = accessKeyId;
		this.secretAccessKey = secretAccessKey;
		this.dssEndpoint = dssEndpoint;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.file = this.__file == null ? null : siemensdescommons.proxies.Attachment.initialize(getContext(), __file);

		// BEGIN USER CODE
                // Extract keys
                final String currentAccessKeyId;
                final String currentSecretAccessKey;
                IConfigStrategy configStrategy = null;

                // if an access key was passed in, use it; otherwise, use the one from the
                // session
                if (accessKeyId != null && !accessKeyId.trim().isEmpty() && secretAccessKey != null
                                && !secretAccessKey.trim().isEmpty()) {
                        currentAccessKeyId = accessKeyId.trim();
                        currentSecretAccessKey = secretAccessKey.trim();
                } else {
                        // get mendix configuration stratgey
                        configStrategy = MendixStartupConfig.getInstance().getConfigStrategy();

                        // check if SAM Auth authentication can be skipped
                        final boolean skipSAMAuth = Boolean
                                        .parseBoolean((String) configStrategy.getConfig("skipSamAuth"));

                        // if SAM Auth authentication can be skipped, extract access key & user info
                        // from config;
                        // otherwise, extract access key & user info from session
                        if (skipSAMAuth) {
                                currentAccessKeyId = (String) configStrategy.getConfig("_devAccessKeyId");
                                currentSecretAccessKey = (String) configStrategy.getConfig("_devSecretAccessKey");
                        } else {
                                final SessionData sessionData = Microflows.mF_GetSessionData(getContext());
                                currentAccessKeyId = sessionData.getaccessKeyId();
                                currentSecretAccessKey = sessionData.getsecretAccessKey();
                        }
                }

                if (dssEndpoint != null && !dssEndpoint.trim().isEmpty()) {
                        dssEndpoint = dssEndpoint.trim();
                } else {
                        if (configStrategy == null) {
                                // get mendix configuration stratgey
                                configStrategy = MendixStartupConfig.getInstance().getConfigStrategy();
                        }

                        dssEndpoint = (String) configStrategy.getConfig("dssEndpoint");
                }

                String fileName = this.file.getName();
                long length = this.file.getSize();
                
                if(length<=-1)
                        return true;

                // String contentType = URLConnection.guessContentTypeFromName(fileName);
                String contentType = this.contentType;

                String md5 = Base64.getEncoder().encodeToString(getBytesOfMd5(Core.getFileDocumentContent(getContext(), __file)));

                UploadFileByTicketRequest ticketRequest = new UploadFileByTicketRequest();

                UploadFileInput fileInput = new UploadFileInput();

                fileInput.setFilename(fileName);
                Core.getLogger("JA_UploadFileByTicket").info(fileName);

                fileInput.setContentType(contentType);
                Core.getLogger("JA_UploadFileByTicket").info("content type:" + contentType);

                fileInput.setLength(length);
                Core.getLogger("JA_UploadFileByTicket").info(length);

                fileInput.setMd5(md5);
                Core.getLogger("JA_UploadFileByTicket").info(md5);

                ticketRequest.setUploadFileInput(fileInput);

                ticketRequest.setStream(Core.getFileDocumentContent(getContext(), this.__file));

                DssConfiguration config = new DssConfiguration();

                config.setRegion("us-east-1");
                config.setACCESS_KEY_ID(currentAccessKeyId);
                config.setSECRET_ACCESS_KEY(currentSecretAccessKey);
                config.setDSS(dssEndpoint);
                config.setFILE(dssEndpoint);
                try {
                        IDssClient client = DssClientFactory.GetDssClient(config);
                        client.uploadFileByTicket(this.file.getuploadTicket(), ticketRequest);
                        return true;

                } catch (Exception e) {
                        System.out.println(e.getMessage());
                        Core.getLogger("JA_UploadFileByTicket").error(e.getMessage());
                        e.printStackTrace();
                        return false;
                }

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "UploadFileByTicket";
	}

	// BEGIN EXTRA CODE
        public static byte[] getBytesOfMd5(InputStream is) throws IOException {
                byte[] buffer = new byte[1024];
                MessageDigest complete = null;
                try {
                        complete = MessageDigest.getInstance("MD5");
                } catch (NoSuchAlgorithmException e) {
                        return null;
                }

                int numRead;
                do {
                        numRead = is.read(buffer);
                        if (numRead > 0) {
                                complete.update(buffer, 0, numRead);
                        }
                } while (numRead != -1);

                // is.close();
                return complete.digest();
        }

        public static String encodeString(String value) throws UnsupportedEncodingException {
                return URLEncoder.encode(value, StandardCharsets.UTF_8.toString());
        }
	// END EXTRA CODE
}

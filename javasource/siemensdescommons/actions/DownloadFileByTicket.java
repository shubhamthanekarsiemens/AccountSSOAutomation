// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package siemensdescommons.actions;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.siemens.plm.sdk.dss.DssClientFactory;
import com.siemens.plm.sdk.dss.DssConfiguration;
import com.siemens.plm.sdk.dss.IDssClient;
import com.siemens.plm.sdk.dss.model.DownloadFileByTicketRequest;
import com.siemens.plm.sdk.dss.model.DownloadFileResponse;
import com.siemens.plm.webapp.strategies.IConfigStrategy;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import siemenssamauthssomodule.actions.custom.MendixStartupConfig;
import siemenssamauthssomodule.proxies.SessionData;
import siemenssamauthssomodule.proxies.microflows.Microflows;

public class DownloadFileByTicket extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __fileDocument;
	private siemensdescommons.proxies.Attachment fileDocument;
	private java.lang.String accessKeyId;
	private java.lang.String secretAccessKey;
	private java.lang.String dssEndpoint;

	public DownloadFileByTicket(IContext context, IMendixObject fileDocument, java.lang.String accessKeyId, java.lang.String secretAccessKey, java.lang.String dssEndpoint)
	{
		super(context);
		this.__fileDocument = fileDocument;
		this.accessKeyId = accessKeyId;
		this.secretAccessKey = secretAccessKey;
		this.dssEndpoint = dssEndpoint;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.fileDocument = this.__fileDocument == null ? null : siemensdescommons.proxies.Attachment.initialize(getContext(), __fileDocument);

		// BEGIN USER CODE
                try {

                        final String currentAccessKeyId;
                        final String currentSecretAccessKey;
                        IConfigStrategy configStrategy = null;

                        // if an access key was passed in, use it; otherwise, use the one from the
                        // session
                        if (accessKeyId != null && !accessKeyId.trim().isEmpty() && secretAccessKey != null
                                        && !secretAccessKey.trim().isEmpty()) {
                                currentAccessKeyId = accessKeyId.trim();
                                currentSecretAccessKey = secretAccessKey.trim();
                        } else {
                                // get mendix configuration stratgey
                                configStrategy = MendixStartupConfig.getInstance().getConfigStrategy();

                                // check if SAM Auth authentication can be skipped
                                final boolean skipSAMAuth = Boolean
                                                .parseBoolean((String) configStrategy.getConfig("skipSamAuth"));

                                // if SAM Auth authentication can be skipped, extract access key & user info
                                // from config;
                                // otherwise, extract access key & user info from session
                                if (skipSAMAuth) {
                                        currentAccessKeyId = (String) configStrategy.getConfig("_devAccessKeyId");
                                        currentSecretAccessKey = (String) configStrategy
                                                        .getConfig("_devSecretAccessKey");
                                } else {
                                        final SessionData sessionData = Microflows.mF_GetSessionData(getContext());
                                        currentAccessKeyId = sessionData.getaccessKeyId();
                                        currentSecretAccessKey = sessionData.getsecretAccessKey();
                                }
                        }

                        if (dssEndpoint != null && !dssEndpoint.trim().isEmpty()) {
                                dssEndpoint = dssEndpoint.trim();
                        } else {
                                if (configStrategy == null) {
                                        // get mendix configuration stratgey
                                        configStrategy = MendixStartupConfig.getInstance().getConfigStrategy();
                                }

                                dssEndpoint = (String) configStrategy.getConfig("dssEndpoint");
                        }

                        DownloadFileByTicketRequest downloadFileByTicketRequest = new DownloadFileByTicketRequest();
                        DownloadFileResponse downloadFileResponse = null;
                        downloadFileByTicketRequest.setTicketId(this.fileDocument.getdownloadTicket());

                        DssConfiguration config = new DssConfiguration();

                        config.setRegion("us-east-1");
                        config.setACCESS_KEY_ID(currentAccessKeyId);
                        config.setSECRET_ACCESS_KEY(currentSecretAccessKey);
                        config.setDSS(dssEndpoint);
                        config.setFILE(dssEndpoint);

                        IDssClient client = DssClientFactory.GetDssClient(config);

                        downloadFileResponse = client.downloadFileByTicket(downloadFileByTicketRequest);

                        Core.getLogger("JA_DownloadFileByTicket").info(downloadFileResponse.getFilename());
                        this.fileDocument.setName(downloadFileResponse.getFilename());
                        Core.storeFileDocumentContent(getContext(), this.fileDocument.getMendixObject(),
                                        downloadFileResponse.getStream());
                        this.fileDocument.commit();

                } catch (Exception e) {
                        System.out.println(e.getMessage());
                        e.printStackTrace();
                }
                return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DownloadFileByTicket";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
